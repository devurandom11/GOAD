- name: update apt cache
  apt: update_cache=yes

- name: Install AD Packages
  apt:
    name:
      - sssd-ad
      - sssd-tools
      - realmd
      - adcli
      - packagekit
      - ntpdate
    state: present

- name: Create KRB5 File
  copy:
    dest: "/etc/krb5.conf"
    content: |
      [libdefaults]
      default_realm = {{ domain |upper}}
      ticket_lifetime = 24h
      renew_lifetime = 7d
      dns_lookup_realm = true
      dns_lookup_kdc = true
      forward = true
      forwardable = true

      [realms]
      {{ domain  |upper }} = {
        admin_server = {{ dc_fqdn  |upper}}
        kdc = {{ dc_fqdn  |upper}}
      }

      [domain_realm]
      {{ domain|upper }} = {{ domain }}
      .{{ domain|upper }} = {{ domain }}

- name: Install krb5 Packages
  apt:
    name:
      - krb5-user
      - sssd-krb5
    state: present

- name: Modify Hosts File to add current hostname
  lineinfile:
    dest: "/etc/hosts"
    line: "127.0.1.1       {{ hostname }}.{{ domain }}"
    state: present
    backup: yes

- name: Modify Hosts File to add domain dc 
  lineinfile:
    dest: "/etc/hosts"
    line: "{{dc_ip}}       {{ dc_fqdn }}  {{ domain }}"
    state: present
    backup: yes

- name: Modify resolv.conf to use domain controller as DNS
  copy:
    dest: "/etc/resolv.conf"
    content: |
      search {{ domain }}
      nameserver {{ dc_ip }}
    backup: yes

- name: Ensure time is synchronized with domain controller
  shell:
    "ntpdate -u {{ dc_ip }}"

- name: Test DNS resolution of domain controller
  shell:
    "host {{ dc_fqdn }}"
  register: dns_test
  ignore_errors: true

- name: Print DNS test results
  debug:
    var: dns_test.stdout_lines

- name: Modify Hostname
  shell:
    "sudo hostnamectl set-hostname {{ hostname }}.{{ domain }}"

- name: Clear any previous Kerberos tickets
  shell:
    "kdestroy -A"
  ignore_errors: true

- name: Verify Kerberos configuration
  shell:
    "cat /etc/krb5.conf"
  register: krb5_conf

- name: Print Kerberos configuration
  debug:
    var: krb5_conf.stdout_lines

- name: Kinit
  shell:
    "echo {{ domain_password }} | sudo kinit {{ domain_username }}"
  register: kinit_result

- name: Print Kinit Result
  debug:
    var: kinit_result.stdout_lines

- name: Verify Kerberos ticket
  shell:
    "klist"
  register: klist_result
  ignore_errors: true

- name: Print Kerberos tickets
  debug:
    var: klist_result.stdout_lines

- name: Check if domain joined
  shell:
    "realm list"
  register: domain_joined

- name: Print realm list Result
  debug:
    var: domain_joined.stdout_lines

- name: Join Realm with Discovery
  shell:
    "echo {{ domain_password }} | sudo realm join --verbose {{ domain }} -U {{ domain_username }}"
  when: not domain in domain_joined.stdout_lines
  register: realm_result
  ignore_errors: true

- name: Print Realm Result
  debug:
    var: realm_result.stdout_lines
  when: not domain in domain_joined.stdout_lines

- name: Try joining with adcli if realm failed
  shell:
    "echo {{ domain_password }} | sudo adcli join --verbose --domain {{ domain }} --domain-realm {{ domain|upper }} --domain-controller {{ dc_fqdn }} --login-type user --login-user {{ domain_username }} --stdin-password"
  when: not domain in domain_joined.stdout_lines and (realm_result is failed or realm_result.rc != 0)
  register: adcli_result
  ignore_errors: true

- name: Print adcli Result
  debug:
    var: adcli_result.stdout_lines
  when: not domain in domain_joined.stdout_lines and (realm_result is failed or realm_result.rc != 0)

- name: Check if domain joined after adcli
  shell:
    "realm list"
  register: domain_joined_after_adcli
  when: not domain in domain_joined.stdout_lines and (realm_result is failed or realm_result.rc != 0)

- name: Print realm list after adcli
  debug:
    var: domain_joined_after_adcli.stdout_lines
  when: not domain in domain_joined.stdout_lines and (realm_result is failed or realm_result.rc != 0)

- name: Activate Homedir Creation
  shell:
    "sudo pam-auth-update --enable mkhomedir"

- name: Modify SSDCONF Line 1 Ubuntu
  replace:
    path: /etc/sssd/sssd.conf
    regexp: 'use_fully_qualified_names = True'
    replace: 'use_fully_qualified_names = False'

- name: Modify SSDCONF Line 2 Ubuntu
  replace:
    path: /etc/sssd/sssd.conf
    regexp: 'fallback_homedir = /home/%u@%d'
    replace: 'fallback_homedir = /home/%u'

- name: Add {{ item }} to Sudoers Ubuntu
  lineinfile:
    dest: "/etc/sudoers"
    line: "%{{ item }}   ALL=(ALL) NOPASSWD:ALL"
    state: present
    validate: /usr/sbin/visudo -cf %s
    backup: yes
  loop: "{{sudoers_group}}"

- name: Allow {{ item }} Login Ubuntu
  shell:
    "realm permit -g {{ item }}@{{ domain }}"
  loop: "{{ssh_group}}"

